import datetime
import random

import telebot
from telebot.types import Message, ReplyKeyboardRemove as RM, ReplyKeyboardMarkup as RKM, InlineKeyboardButton as IB, InlineKeyboardMarkup as IKM,CallbackQuery as Cq
import s_taper
from s_taper.consts import *
import time

temp = {}
powers={'–≤–æ–∑–¥—É—ÖüçÉ':(100,17),'–í–æ–¥–∞üåä':(90,22),'–ó–µ–º–ª—è üåç':(150,16)}
users={
    'userid':INT+KEY,
    'username':TEXT,
    'power':TEXT,
    'hp':INT,
    'damage':INT,
    'levl':INT,
    'xp':INT
}
eats={
    'userid':INT+KEY,
    'food':TEXT
}
heals=s_taper.Taper('eats','rpg_game.db').create_table(eats)
user=s_taper.Taper('users','rpg_game.db').create_table(users)
bot=telebot.TeleBot('7344957153:AAHt6VMzyrnps70n_0mvmHgKeXheq-EmZcI')
class Enemy:
    enemies = {
        '–í—É—Ä–¥–∞–ª–∞–∫': (80, 20),
        '–ü—Ä–∏–∑—Ä–∞–∫': (85, 15),
        '–ú–∏–Ω–æ—Ç–∞–≤—Ä': (100, 15),
        '–ú–µ–¥—É–∑–∞': (75, 25),
        'Bop': (60, 20),
        '–§–µ–Ω–∏–∫—Å': (130, 30),
        '–î—Ä–∞–∫–æ–Ω': (150, 40),
        '–ü—å—è–Ω—ã–π –¥–µ–¥': (90, 25),
        '–≥–æ–ª–æ–¥–Ω–∞—è —Å–≤–∏–Ω—å—è': (400, 20)
        }

    def __init__(self, hero_lvl):
        self.name = random.choice(list(self.enemies))
        self.hp=self.enemies[self.name][0] + (5 * (hero_lvl-1))  # –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —É—Ä–æ–≤–Ω—è –≥–µ—Ä–æ—è
        self.damage = self.enemies[self.name][1] + (5* (hero_lvl - 1)) # –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —É—Ä–æ–≤–Ω—è –≥–µ—Ä–æ—è

def fight(msg: Message):
    bot.send_message(msg.chat.id, '–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–µ—Ä–µ–≤–Ω–∏ –≤ –ø–æ–∏—Å–∫–∞—Ö –≤—Ä–∞–≥–æ–≤...')
    time.sleep(3)
    bot.send_message(msg.chat.id, 'K–∞–∂–µ—Ç—Å—è –≤—Ä–∞–≥–∏ —É–∂–µ –±–ª–∏–∑–∫–æ...')
    time.sleep(1)
    new_enemy(msg)
def new_enemy (msg: Message):
    player = user.read('userid', msg.chat.id)
    enemy=Enemy(player[5])
    kb = RKM(True, True)
    kb.row("–°—Ä–∞–∑–∏—Ç—å—Å—è", "–°–±–µ–∂–∞—Ç—å")
    kb.row("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥")
    txt = f'T—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª –≤—Ä–∞–≥–∞: {enemy.name}, xn: {enemy.hp}, —É—Ä–æ–Ω: {enemy.damage}. \n—á—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å?'
    bot.send_message(msg.chat.id, txt, reply_markup=kb)
    bot.register_next_step_handler(msg, fight_handler, enemy)
def fight_handler(msg:Message,enemy:Enemy):
    if msg.text=='–°—Ä–∞–∑–∏—Ç—å—Å—è':
        attack(msg,enemy)
    elif msg.text=='–°–±–µ–∂–∞—Ç—å':
        run=random.randint(1,5)
        if run in range(2,3):
            bot.send_message(msg.chat.id,'–í—ã —Å–±–µ–∂–∞–ª–∏')
            time.sleep(3)
            new_enemy(msg)
        else:
            bot.send_message(msg.chat.id,'–≤–∞–º –Ω–µ—É–¥–∞–ª–æ—Å—å —Å–±–µ–∂–∞—Ç—å, –≤–∞—Å –¥–æ–≥–Ω–∞–ª–∏')
            attack(msg,enemy)
    elif  msg.text=='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥':
        time.sleep(3)
        bot.send_message(msg.chat.id,'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–æ—Ä–æ–¥')
        time.sleep(3)
        menu(msg)
def attack(msg:Message,enemy:Enemy):
    att=player_attack(msg,enemy)
    if att is True:
        att=enemy_attack(msg,enemy)
        if att is True:
            attack(msg,enemy)
    else:
        player=user.read('userid',msg.chat.id)
        time.sleep(2)
        xp=random.randint(20,30)
        bot.send_message(msg.chat.id,f'–ó–∞ –±–æ–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {xp} –æ–ø—ã—Ç–∞')
        player[6]+=xp
        user.write(player)
        xp_check(msg)
        bot.send_message(msg.chat.id,'–≤—ã –æ—Ç–ø—Ä–≤–ª—è–µ—Ç–µ—Å—å –¥–∞–ª—å—à–µ')
        new_enemy(msg)
        return
def player_attack(msg:Message,enemy:Enemy):
        time.sleep(2)
        player=user.read('userid',msg.chat.id)
        enemy.hp-=player[4]
        if enemy.hp<=0:
            bot.send_message(msg.chat.id,'–≤—ã –ø–æ–±–µ–¥–∏–ª–∏')
            return False
        else:
            bot.send_message(msg.chat.id,f'{enemy.name}, hp {round(enemy.hp,1)}')
            return True
def enemy_attack(msg:Message,enemy:Enemy):
    time.sleep(2)
    player = user.read('userid', msg.chat.id)
    player[3]-=enemy.damage
    user.write(player)
    if player[3]<=0:
        player[3]=1
        user.write(player)
        bot.send_message(msg.chat.id,'–≤—ã –ø–æ—á—Ç–∏ –ø–æ–≥–∏–±–ª–∏')
        time.sleep(2)
        menu(msg)
        return
    else:
        bot.send_message(msg.chat.id,f'{player[1]}, hp {round(player[3],1)}')
        return True

def xp_check(m: Message):
    player = user.read('user_id', m.chat.id)
    if player[6] >= 100 + ((player[5]-1) *50):
        player[6] -= 100 + ((player[5]- 1) * 50)
        player[3] = powers[player[2]][0] + ((player[5] - 1) * 15)
        player[5] += 1
        player[4] += 5
        player[3] += 15
        user.write(player)
        t = f"–°—Ç–∏x–∏—è: {player[2]}\nH–∏–∫–Ω–µ–π–º: {player[1]}\n" \
            f"–∑–¥–æ—Ä–æ–≤—å–µ: {player[3]}\n" \
            f"—É—Ä–æ–Ω: {player[4]}\n" \
            f"—É—Ä–æ–≤–µ–Ω—å: {player[5]}\no–ø—ã—Ç: {player[6]}"
        bot.send_message(m.chat.id, f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–≤—ã—à–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è!!! –í–æ—Ç —Ç–≤–æ–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n' + t)
        time.sleep(2)
        return
    return
def new_player(msg:Message):
    result=user.read_all()
    for b in result:
        if b [0]==msg.chat.id:
            return False
    return True
@bot.message_handler(['start'])
def start(msg: Message):
   if new_player(msg):
       temp[msg.chat.id] = {}
       reg_1(msg)
   else:
       menu(msg)
def reg_1(msg: Message):  # —Ç—É—Ç –º—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –∏–≥—Ä–æ–∫–∞ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
    text = ("–ü—Ä–∏–≤–µ—Ç, %s. –í —ç—Ç–æ–π –∏–≥—Ä–µ —Ç—ã –æ—Ç—Ä–∏–Ω–µ—à—å —Å–≤–æ—é —Å—É—â–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–Ω–µ—à—å –Ω–∞—Å—Ç–æ—è—â–∏–º –º–∞–≥–æ–º üßô‚Äç‚ôÇÔ∏è. –ú–∏—Ä –Ω–∞ –ø–æ—Ä–æ–≥–µ "
           "—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è: –Ω–∞—Ä–æ–¥ –æ–≥–Ω—è üî• —Ä–∞–∑–≤—è–∑–∞–ª –≤–æ–π–Ω—É, –∏ –∏–º–µ–Ω–Ω–æ —Ç—ã —Å—Ç–∞–Ω–µ—à—å —Ç–µ–º, –∫—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–º –≤ –Ω–µ–π –∏–ª–∏ –±—É–¥–µ—Ç"
           "–ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è—Ç—å –∏–º‚öîÔ∏è!\n–Ø –≤–µ—Ä—é –≤ —Ç–µ–±—è!\n\n–ù–∞–∑–æ–≤–∏ —Å–≤–æ—ë –∏–º—è, –Ω–æ–≤–æ–±—Ä–∞–Ω–µ—Ü:")
    bot.send_message(msg.chat.id, text % msg.from_user.first_name)
    bot.register_next_step_handler(msg, reg_2)
def reg_2(msg: Message):  # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∏—Ö–∏—é
   temp[msg.chat.id]['username']=msg.text
   kb=RKM(resize_keyboard=True,one_time_keyboard=True)
   kb.row('–û–≥–æ–Ω—å üî•','–í–æ–¥–∞üåä')
   kb.row('–ó–µ–º–ª—è üåç',"–≤–æ–∑–¥—É—ÖüçÉ")
   bot.send_message(msg.chat.id,'–≤—ã–±–µ—Ä–∏ —Å—Ç–∏—Ö–∏—é',reply_markup=kb)
   bot.register_next_step_handler(msg, reg_3)
def reg_3(msg: Message):
   if msg.text == "–û–≥–æ–Ω—å üî•":
       bot.send_message(msg.chat.id, "–ú–∞–≥–∏—è –û–≥–Ω—è –ø–æ–¥ –∑–∞–ø—Ä–µ—Ç–æ–º –≤ –≥–æ—Ä–æ–¥–µ!")
       reg_2(msg)
       return
   # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏—Ö–∏—é
   temp[msg.chat.id]["power"] = msg.text
   hp,dmg=powers[msg.text]
   user.write([msg.chat.id, temp[msg.chat.id]["username"], temp[msg.chat.id]["power"], hp, dmg, 1, 0])
   # heals.write([msg.chat.id, {}])
   print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
   bot.send_message(msg.chat.id,"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
   time.sleep(2)
   menu(msg)
def reg_4(msg:Message):
    if msg.text == '—Ç—Ä–µ–Ω–µ—Ä–æ–≤–∞—Ç—å—Å—è':
        workout(msg)
    if msg.text == '–∏—Å–ø—ã—Ç–∞—Ç—å –ª–æ–≤–∫–æ—Å—Ç—å':
        block(msg)
    if msg.text == '—Å—Ä–∞–∂–∞—Ç—å—Å—è':
        fight(msg)


def reg_5(msg:Message):
    if msg.text=='–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å hp':
        eat(msg)
    if msg.text == '–ø–µ—Ä–µ–¥–æ—Ö–Ω—É—Ç—å':
        sleep(msg)

@bot.message_handler(['menu'])
def menu(msg: Message):
    try:
        print(temp[msg.chat.id])
    except KeyError:
        temp[msg.chat.id]={}
    txt=('–ß—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å?\n'
         '/square-–∏–¥—ë–º –≤ –¥–µ—Ä–µ–≤–Ω—é\n'
         '/home-–∏–¥—ë–º –¥–æ–º–æ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–ª—ã\n'
         '/stats-–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    bot.send_message(msg.chat.id,txt, reply_markup=RM())

# @bot.message_handler(['fight'])
# def fight(msg:Message):
@bot.message_handler(['add_heal'])
def add_heal(msg:Message):
    _,food=heals.read('userid',msg.chat.id)
    food['–ø—Ä–æ–∏–≥ —Å –º–æ—Ä–∫–æ–≤–∫–æ–π']=[10,12],
    heals.write([msg.chat.id,food])
    bot.send_message(msg.chat.id,'–≥–µ—Ä–æ–π –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–ø–∞—Å—ã')

def eat(msg: Message):
    kb = IKM()
    _, food = heals.read("userid", msg.chat.id)
    if food == {}:
        bot.send_message(msg.chat.id, '–ö—É—à–∞—Ç—å –Ω–µ—á–µ–≥–æ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /add_heal —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å '
                                      '—Å–≤–æ–∏ –∑–∞–ø–∞—Å—ã)', reply_markup=RM())
        menu(msg)
        return
    for key in food:
        if food[key][0] > 0:
            kb.row(IB(f"{key} {food[key][1]} hp. - {food[key][0]} —à—Ç.", callback_data=f"food_{key}_{food[key][1]}"))
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏ —á—Ç–æ –±—É–¥–µ—à—å –µ—Å—Ç—å:", reply_markup=kb)
def eating(msg, ft, hp):
    _, food = heals.read("user_id", msg.chat.id)
    player = user.read("user_id", msg.chat.id)
    # –û—Ç–Ω–∏–º–∞–µ–º –µ–¥—É
    if food[ft][0] == 1:
        del food[ft]
    else:
        food[ft][0] -= 1
    heals.write([msg.chat.id, food])

    # –î–æ–±–∞–≤–ª—è–µ–º –•–ü
    player[3] += int(hp)
    user.write(player)
    print("–ò–≥—Ä–æ–∫ –ø–æ–µ–ª")

@bot.callback_query_handler(func=lambda call: True)
def callback(call: Cq):
    print(call.data)
    if call.data.startswith("food_"):
        a = call.data.split("_")
        eating(call.message, a[1], [2])
        kb = IKM()
        _,food=heals.read("user_id", call.message.chat.id)
        if food == {}:
            bot.send_message(call.message.chat.id,'–∫—É—à–∞—Ç—å –Ω–µ—á–µ–≥–æ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /add_heal —á—Ç–æ–± –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å—ã',reply_markup=kb)
            menu (call.message)
            return
        for key in food:
            kb.row(IB(f"{key} {food[key][1]} hp. - {food[key][0]} —à—Ç.", callback_data=f"food_{key}_{food[key][1]}"))
        bot.edit_message_reply_markup(call.message.chat.id,call.message.message_id,reply_markup=kb)
    if call.data.startswith("sleep_"):
        a = call.data.split("_")
        t = int(a[1])
        bot.send_message(call.message.chat.id, f"–¢—ã –ª–µ–≥ –æ—Ç–¥—ãx–∞—Ç—å, –∫–æ–ª-–≤–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–Ω–∞: {t}.")
        time.sleep(t)
        sleeping(call.message, a[1])
        bot.delete_message (call.message.chat.id, call.message.message_id)
        menu(call.message)
    if call.data == '0':
        bot.delete_message (call.message.chat.id, call.message.message_id)
        menu (call.message)
    if call.data == "menu":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        menu(call.message)
    if call.data == "workout":
        player = user.read("userid", call.message.chat.id)
        player[4] += player[5] / 10
        player[4] = round(player[4], 2)
        user.write(player)
        bot.answer_callback_query(call.id, f"–¢—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è –∏ —Ç–≤–æ—è —Å–∏–ª–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è!\n –¢e–øe—Ä—å —Ç—ã –Ω–∞–Ω–æ—Å–∏—à—å {player[4]}", True)
@bot.message_handler(['home'])
def home(msg:Message):
    kb=RKM(True,True)
    kb.row('–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å hp', '–ø–µ—Ä–µ–¥–æ—Ö–Ω—É—Ç—å')
    bot.send_message(msg.chat.id,'—á–µ–º —Ö–æ—á–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è? ',reply_markup=kb)
    bot.register_next_step_handler(msg,reg_5)


@bot.message_handler(['square'])
def square(msg: Message):
    kb = RKM(True, True)
    kb.row('—Ç—Ä–µ–Ω–µ—Ä–æ–≤–∞—Ç—å—Å—è', '–∏—Å–ø—ã—Ç–∞—Ç—å –ª–æ–≤–∫–æ—Å—Ç—å','—Å—Ä–∞–∂–∞—Ç—å—Å—è')
    bot.send_message(msg.chat.id, '—á–µ–º —Ö–æ—á–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è? ', reply_markup=kb)
    bot.register_next_step_handler(msg, reg_4)


def sleep(msg:Message):
    player = user.read("userid",msg.chat.id)
    low = int(powers[player[2]][0] * player[5]) // 2 - player[3]
    high = int(powers[player[2]][0] * player[5]) - player[3]
    kb=IKM()
    if low>0:
        kb.row(IB(f"–í–∑–¥—Ä–µ–º–Ω—É—Ç—å ‚Äî +{low}‚ù§Ô∏è", callback_data=f"sleep_{low}"))
    if high>0:
        kb.row(IB(f"–í–∑–¥—Ä–µ–º–Ω—É—Ç—å ‚Äî +{high}‚ù§Ô∏è", callback_data=f"sleep_{high}"))
    if len(kb.keyboard)==0:
        kb.row(IB('–°–ø–∞—Ç—å –Ω–µ —Ö–æ—á–µ—Ç—Å—è', callback_data='0'))
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏, —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—à—å –æ—Ç–¥—ã—Ö–∞—Ç—å:", reply_markup=kb)


def sleeping(msg:Message,hp):
    player=user.read('userid', msg.chat.id)
    player[3]+= int(hp)
    user.write(player)
    print('–∏–≥—Ä–æ–∫ –ø–æ—Å–ø–∞–ª')


@bot.message_handler(['stats'])
def stats(msg:Message):
    player=user.read('userid',msg.chat.id)
    t = f"–°—Ç–∏—Ö–∏—è: {player[2]}\n–ù–∏–∫–Ω–µ–π–º: {player[1]}\n" \
        f"–ó–¥–æ—Ä–æ–≤—å–µ: {player[3]}‚ù§Ô∏è\n" \
        f"–£—Ä–æ–Ω: {player[4]}‚öîÔ∏è\n" \
        f"–£—Ä–æ–≤–µ–Ω—å: {player[5]}\n–û–ø—ã—Ç: {player[6]}‚öúÔ∏è\n\n" \
        f"–ï–¥–∞:\n"
    _,food=heals.read('userid',msg.chat.id)
    for x in food:
        t+=f'{x} ‚ù§Ô∏è{food[x][1]}-{food[x][0]}—à—Ç—É–∫\n'
    bot.send_message(msg.chat.id, t)
    time.sleep(3)
    menu(msg)
def workout(msg:Message):
    kb=IKM()
    kb.row(IB('—Ç—Ä–µ–Ω–µ—Ä–æ–≤–∞—Ç—å—Å—è',callback_data='workout'))
    kb.row(IB('–ù–∞–∑–∞–¥',callback_data='menu'))
    bot.send_message(msg.chat.id,'–Ω–∞–∂–º–∏ —á—Ç–æ–± —Ç—Ä–µ–Ω–µ—Ä–æ–≤–∞—Ç—å—Å—è',reply_markup=kb)
def block(msg:Message):
    try:
        print(temp[msg.chat.id]['win'])
    except KeyError:
        temp[msg.chat.id]['win']=0
    bot.send_message(msg.chat.id,'–ø—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –∫ –∞—Ç–∞–∫–µ ',reply_markup=RM())
    time.sleep(3)
    side=["–°–ª–µ–≤–æ","–°–ø—Ä–∞–≤–æ","–°–Ω–∏–∑—É","–°–≤–µ—Ä—Ö—É"]
    random.shuffle(side)
    kb=RKM(True,False)
    kb.row(side[0],side[3])
    kb.row(side[1], side[2])
    right=random.choice(side)
    bot.send_message(msg.chat.id,f'–∑–∞—â–∏—â–∞–π—Å—è —É–¥–∞—Ä {right}',reply_markup=kb)
    temp[msg.chat.id]['block_start']=datetime.datetime.now().timestamp()
    bot.register_next_step_handler(msg,block_handler,right)
def block_handler(msg:Message,side:str):
    final=datetime.datetime.now().timestamp()
    if final-temp[msg.chat.id]['block_start']>3 or side!=msg.text:
        bot.send_message(msg.chat.id, '–≤–∞—à–∞ —Ä–µ–∫—Ü–∏—è —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–∞—è –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ')
        time.sleep(5)
        menu(msg)
        return
    if temp[msg.chat.id]['win']<5:
        bot.send_message(msg.chat.id, '—Ç—ã –æ—Ç–±–∏–ª —É–¥–∞—Ä, –ø—Ä–æ–¥–æ–ª–∂–∞–π')
        temp[msg.chat.id]['win']+=1
        block(msg)
        return
    else:
        temp[msg.chat.id]['win']=0
        player=user.read('userid',msg.chat.id)
        player[3]+=20
        user.write(player)
        bot.send_message(msg.chat.id,'–≤–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ —É–≤–µ–ª–∏—á–∏–Ω–æ')
        time.sleep(2)
        menu(msg)
        return






























bot.infinity_polling()